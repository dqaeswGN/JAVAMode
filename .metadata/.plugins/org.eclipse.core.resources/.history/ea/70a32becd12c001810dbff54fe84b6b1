package com.ssm.chapter21.config;

import java.util.Properties;

import javax.sql.DataSource;

import org.apache.commons.dbcp.BasicDataSourceFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.transaction.annotation.TransactionManagementConfigurer;

@Configuration
//定义Spring 扫描的包
@ComponentScan("com.*")
//使用事务驱动管理器
@EnableTransactionManagement
//实现接口TransactionManagementConfigurer，这样可以配置注解驱动事务
public class RootConfig implements TransactionManagementConfigurer {
	private DataSource dataSource = null;
	
	/**
	 * 配置数据库连接
	 */
	@Bean(name="datSource")
	public DataSource initDataSoutce(){
		if(dataSource != null){
			return dataSource;
		}
		Properties props=new Properties();
		props.setProperty("driverClassName", "com.mysql.jdbc.Driver");
		props.setProperty("url", "jdbc://mysql://192.168.152.131:3306/chpater13");
		props.setProperty("username", "guoning");
		props.setProperty("password", "guoning");
		try{
			dataSource = BasicDataSourceFactory.createDataSource(props);
		}catch(Exception e){
			e.printStackTrace();
		}
		return dataSource;
	}
	
	@Bean(name="sqlSessionFactory")
	public SqlSessionFactoryBean initSqlSessionFactory(){
		SqlSessionFactoryBean sqoSessionFactory = new SqlSessionFactoryBean()l
		return null;
	}
	
	@Override 
	public PlatformTransactionManager annotationDrivenTransactionManager() {
		
		return null;
	}

}
